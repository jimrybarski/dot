-- vim.api.nvim_create_autocmd('FileType', {
--     pattern = 'org',
--     callback = function(args)
--         local bufnr = args.buf
--
--         -- Date increment/decrement keymaps
--         local function adjust_date(unit, increment)
--             local line = vim.fn.getline('.')
--             local col = vim.fn.col('.')
--
--             -- Look for date patterns around cursor
--             local date_patterns = {
--                 '%d%d%d%d%-%d%d%-%d%d',           -- 2024-01-01
--                 '%d%d%d%d%-%d%d%-%d%d %d%d:%d%d', -- 2024-01-01 12:30
--                 '<%d%d%d%d%-%d%d%-%d%d[^>]*>',    -- <2024-01-01 Mon>
--             }
--
--             for _, pattern in ipairs(date_patterns) do
--                 local start_pos, end_pos = line:find(pattern)
--                 if start_pos and col >= start_pos and col <= end_pos then
--                     local date_str = line:sub(start_pos, end_pos)
--                     local year, month, day, hour, min = date_str:match('(%d%d%d%d)%-(%d%d)%-(%d%d)%s*(%d*)%:?(%d*)')
--                     -- Handle org-mode deadline format <YYYY-MM-DD Day HH:MM>
--                     if not hour or hour == '' then
--                         local time_match = date_str:match('%d%d%d%d%-%d%d%-%d%d%s+%w+%s+(%d+):(%d+)')
--                         if time_match then
--                             hour, min = time_match:match('(%d+):(%d+)')
--                         end
--                     end
--
--                     if year and month and day then
--                         local time = os.time({
--                             year = tonumber(year),
--                             month = tonumber(month),
--                             day = tonumber(day),
--                             hour = tonumber(hour) or 0,
--                             min = tonumber(min) or 0
--                         })
--
--                         local adjustment = 0
--                         if unit == 'y' then
--                             adjustment = increment * 365 * 24 * 60 * 60
--                         elseif unit == 'm' then
--                             adjustment = increment * 30 * 24 * 60 * 60
--                         elseif unit == 'w' then
--                             adjustment = increment * 7 * 24 * 60 * 60
--                         elseif unit == 'd' then
--                             adjustment = increment * 24 * 60 * 60
--                         elseif unit == 'h' then
--                             adjustment = increment * 60 * 60
--                         elseif unit == 'n' then
--                             adjustment = increment * 60
--                         end
--
--                         local new_time = time + adjustment
--                         local new_date = os.date('*t', new_time)
--                         local day_name = os.date('%a', new_time)
--
--                         local new_date_str
--                         -- Handle org-mode angle brackets with day name
--                         if date_str:match('^<.*>$') then
--                             if hour and hour ~= '' then
--                                 new_date_str = string.format('<%04d-%02d-%02d %s %02d:%02d>',
--                                     new_date.year, new_date.month, new_date.day, day_name, new_date.hour, new_date.min)
--                             else
--                                 new_date_str = string.format('<%04d-%02d-%02d %s>',
--                                     new_date.year, new_date.month, new_date.day, day_name)
--                             end
--                         else
--                             -- Regular date format
--                             if hour and hour ~= '' then
--                                 new_date_str = string.format('%04d-%02d-%02d %02d:%02d',
--                                     new_date.year, new_date.month, new_date.day, new_date.hour, new_date.min)
--                             else
--                                 new_date_str = string.format('%04d-%02d-%02d',
--                                     new_date.year, new_date.month, new_date.day)
--                             end
--                         end
--
--                         local new_line = line:sub(1, start_pos - 1) .. new_date_str .. line:sub(end_pos + 1)
--                         vim.fn.setline('.', new_line)
--                         return
--                     end
--                 end
--             end
--         end
--
--         -- Date increment keymaps
--         vim.keymap.set('n', '<A-y>', function() adjust_date('y', 1) end, { buffer = bufnr, desc = 'Increment year' })
--         vim.keymap.set('n', '<A-Y>', function() adjust_date('y', -1) end, { buffer = bufnr, desc = 'Decrement year' })
--         vim.keymap.set('n', '<A-m>', function() adjust_date('m', 1) end, { buffer = bufnr, desc = 'Increment month' })
--         vim.keymap.set('n', '<A-M>', function() adjust_date('m', -1) end, { buffer = bufnr, desc = 'Decrement month' })
--         vim.keymap.set('n', '<A-w>', function() adjust_date('w', 1) end, { buffer = bufnr, desc = 'Increment week' })
--         vim.keymap.set('n', '<A-W>', function() adjust_date('w', -1) end, { buffer = bufnr, desc = 'Decrement week' })
--         vim.keymap.set('n', '<A-d>', function() adjust_date('d', 1) end, { buffer = bufnr, desc = 'Increment day' })
--         vim.keymap.set('n', '<A-D>', function() adjust_date('d', -1) end, { buffer = bufnr, desc = 'Decrement day' })
--         vim.keymap.set('n', '<A-h>', function() adjust_date('h', 1) end, { buffer = bufnr, desc = 'Increment hour' })
--         vim.keymap.set('n', '<A-H>', function() adjust_date('h', -1) end, { buffer = bufnr, desc = 'Decrement hour' })
--         vim.keymap.set('n', '<A-n>', function() adjust_date('n', 1) end, { buffer = bufnr, desc = 'Increment minute' })
--         vim.keymap.set('n', '<A-N>', function() adjust_date('n', -1) end, { buffer = bufnr, desc = 'Decrement minute' })
--     end,
-- })
--
